Собственное логирование в Tracer SDK - Описание HasTracerLogger и TracerLoggerDelegate | Документация RuStore


































Перейти к основному содержимому
Документация пользователей
Документация разработчиков
RuStore SDK
RuStore API
Сценарии использования
Русский
Русский
English
Начало работы
Аккаунт разработчика
Публикация и проверка приложений
 Монетизация
Реклама и продвижение
Инструменты
RuStore Remote Config
Tracer
Android
Начало работы
Модули Tracer
Дополнительные возможности
Добавление информации к событиям
Собственное логирование Tracer
Аналитика MyTracker
SDK
Статистика
Авторизация VK ID
Проверка подписи APK
Вопросы и ответы
Инструменты
Tracer
Android
Дополнительные возможности
Собственное логирование Tracer
Содержание этой страницы
Собственное логирование в Tracer SDK - описание HasTracerLogger и TracerLoggerDelegate


к сведению
Информация касается собственного логирования Tracer SDK. Никакого отношения к тому, что SDK отправляет на сервер она не имеет. Собственное логирование служит только для самого Tracer SDK и/или его интеграции в ваш проект.


Описание 
HasTracerLogger
 и 
TracerLoggerDelegate
​


Трейсер осуществляет все внутреннее логирование через интерфейс 
TracerLoggerDelegate
. Чтобы подменить механизм логирования, реализуйте 
HasTracerLogger
 в вашем приложении.


В том случае, если вы хотите всего лишь поменять уровень логирования, можно создать экземпляр 
DefaultTracerLoggerDelegate
 (см. ниже).


class
 
MyApplication
 
:
 
Application
,
 
HasTracerLogger
 
{
    override val tracerLoggerDelegate
:
 
TracerLoggerDelegate
        
get
(
)
 
=
 
DefaultTracerLoggerDelegate
(
            minLogPriority 
=
 
Log
.
VERBOSE
,
        
)
}


Полностью переопределить механизм логирования можно в своей реализации 
TracerLoggerDelegate
 (см. ниже).


class
 
MyApplication
 
:
 
Application
,
 
HasTracerLogger
 
{
    override val tracerLoggerDelegate
:
 
TracerLoggerDelegate
        
get
(
)
 
=
 
MyLoggerDelegate
(
)
}
class
 
MyLoggerDelegate
 
:
 
TracerLoggerDelegate
 
{
    
// Начиная с какого уровня логировать события. Используютя константы из android.util.Log
    
// По умочанию Log.DEBUG
    override val minLogPriority
:
 
Int
        
get
(
)
 
=
 
Log
.
VERBOSE
    
    
// Основной метод логирования
    
//
    
// priority - уровень логнирования. Используютя константы из android.util.Log
    
// msg - опциональное сообщение.
    
// tr - опциональное исключение.
    override fun 
println
(
priority
:
 
Int
,
 
msg
:
 
String
?
,
 
tr
:
 
Throwable
?
)
 
{
        
// тут ваш код логирования
        
TODO
(
)
        
// опционально переправить во встроенную реализацию
        
// будет отправлено в android logcat с тэгом ru.ok.tracer
        
DefaultTracerLoggerDelegate
.
println
(
priority
,
 msg
,
 tr
)
    
}
}
Предыдущая страница
Добавление информации к событиям
Следующая страница
Аналитика MyTracker
Описание 
HasTracerLogger
 и 
TracerLoggerDelegate


© VK, 2024




Пользовательское соглашение


Конфиденциальность